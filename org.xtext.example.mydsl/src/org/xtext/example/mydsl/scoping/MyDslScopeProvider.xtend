/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.mydsl.myDsl.MathExp
import org.xtext.example.mydsl.myDsl.MathExpression
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.myDsl.MyDslFactory

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MyDslScopeProvider extends AbstractMyDslScopeProvider {
	override getScope(EObject context, EReference reference) {
	    if (reference === MyDslPackage.Literals.VARIABLE_USE__NAME) {
	        val mathExp = EcoreUtil2.getContainerOfType(context, MathExp)
	        if (mathExp !== null) {
	            val mathExpression = EcoreUtil2.getContainerOfType(mathExp, MathExpression)
	            if (mathExpression !== null) {
	                val variableUses = mathExpression.expressions.filter(MathExp).map[name].map [ name |
	                    val variableUse = MyDslFactory.eINSTANCE.createvariableUse()
	                    variableUse.name = name
	                    variableUse
	                ]
	                return Scopes.scopeFor(variableUses)
	            }
	        }
	    }
	    return super.getScope(context, reference)
	}
}
