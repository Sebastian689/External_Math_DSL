/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.scoping;

import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.myDsl.MathExp;
import org.xtext.example.mydsl.myDsl.MathExpression;
import org.xtext.example.mydsl.myDsl.MyDslFactory;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.variableUse;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((reference == MyDslPackage.Literals.VARIABLE_USE__NAME)) {
      final MathExp mathExp = EcoreUtil2.<MathExp>getContainerOfType(context, MathExp.class);
      if ((mathExp != null)) {
        final MathExpression mathExpression = EcoreUtil2.<MathExpression>getContainerOfType(mathExp, MathExpression.class);
        if ((mathExpression != null)) {
          final Function1<MathExp, String> _function = (MathExp it) -> {
            return it.getName();
          };
          final Function1<String, variableUse> _function_1 = (String name) -> {
            variableUse _xblockexpression = null;
            {
              final variableUse variableUse = MyDslFactory.eINSTANCE.createvariableUse();
              variableUse.setName(name);
              _xblockexpression = variableUse;
            }
            return _xblockexpression;
          };
          final Iterable<variableUse> variableUses = IterableExtensions.<String, variableUse>map(IterableExtensions.<MathExp, String>map(Iterables.<MathExp>filter(mathExpression.getExpressions(), MathExp.class), _function), _function_1);
          return Scopes.scopeFor(variableUses);
        }
      }
    }
    return super.getScope(context, reference);
  }
}
