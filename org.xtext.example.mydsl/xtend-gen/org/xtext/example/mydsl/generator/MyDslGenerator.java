/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.example.mydsl.myDsl.Exp;
import org.xtext.example.mydsl.myDsl.MathExp;
import org.xtext.example.mydsl.myDsl.MyNumber;
import org.xtext.example.mydsl.myDsl.Plus;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp sys = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    fsa.generateFile("math.txt", MyDslGenerator.compute(sys.getExp()));
  }

  public static String compute(final Plus exp) {
    String _compute = MyDslGenerator.compute(exp.getLeft());
    String _plus = ("(" + _compute);
    String _plus_1 = (_plus + "+");
    String _compute_1 = MyDslGenerator.compute(exp.getRight());
    String _plus_2 = (_plus_1 + _compute_1);
    return (_plus_2 + ")");
  }

  public static String compute(final MyNumber exp) {
    int _value = exp.getValue();
    return (Integer.valueOf(_value) + "");
  }

  public static String compute(final Exp exp) {
    return "exp!";
  }
}
